{
  "title": "Self Assessment Of A Scientist",
  "created_datetime": 1486962000,
  "content": "Clink! The glass, frostless doors close to the conference room and I sit down with my manager for my weekly one-on-one. Every week it's a different assessment for how myself and the Engineering team is performing. The conversation week to week is as dynamic as a cooking show - each recipe uniform from the other. This week it's a self-grading test on my \"technical chops.\"\n\n![Whiteboard self-assessment](/img/blog/whiteboarding.jpg \"Whiteboard self-assessment\")\n\n    He whiteboards a box with 4 layers - front-end, web framework, back-end, and systems. Within the box he crams in all buzzwords that define a layer of the tech stack. With his whiteboard marker he points to each box and our dialog begins.\n\n **Manager:** \"Rate yourself on a letter-grade scale on how good you think you are at all these layers of the stack. (As he points to the top box) Front-end, so this would be HTML, CSS, JavaScript and all their supporting frameworks.\"\n\n **Myself:** \"A-. You can put any picture in front of me and I'm confident I can build it into a web page including the interactions. That being said, I still need to research here and there.\"\n\n **Manager:** \"How about web frameworks? Like the ones we use such as Django and their interactions with other layers of the stack.\"\n\n **Myself:** \"A. I got Django down at this point and through it I've learned the perspective on how to interpret other web frameworks.\"\n\n    We went through the rest of the layers of the box; respectively I scored A-, A, A-, and B+. He's dissatisfied that I may have curved my scores upward with self-bias. Naturally that makes sense - if you grade yourself, of course you'll get easy A's! There was something else though that wasn't quite clear to him that I would soon need to surface.\n\n    He \"double-clicked\" into the top box to pry how much I really know about specific JavaScript frameworks and libraries so I can prove my A.\n\n **Manager:** \"What experience have you had keeping up to date with newer JavaScript frameworks like Angular and node?\"\n\n **Myself:** \"I've dabbled with a few projects in them, but don't spend time learning them cover-to-cover. JavaScript is a convoluted world with a lot of pushing and shoving for which framework will dominate. I've invested more time into learning what makes JavaScript tick and how to pick up and learn anything.\"\n\n    We'll stop the anecdote there. If you haven't pick it up by now, I'm a computer scientist. I don't wear a lab coat to work or static-free suits working in a controlled environment. I carry the scientist's mentality. Professionals in my field don't spend time learning everything cover-to-cover, we learn the foundational principles that enable us to learn or create anything. We experiment, try new approaches, but can skip the basics because pre-loaded in our brains are the rules of the languages and all we need to do now is start branching.\n\n    For my \"self test\" you can now see a more colorful picture into how I was answering the questions. What one knows has only slight significance to what one is capable of learning. This is especially important when being a web developer today. There's a constant shift in the focus of programming frameworks that come in the lime-light and you need to be able to adapt.\n\n    One of my favorite books is *Euclid's Elements*. This is the first formal book on mathematical theorems, specifically geometry. You read proof after proof on the exact rules of geometry that lay foundation for other branches of mathematics to branch off of. The content of the book is not exactly exhilarating for me, but realizing the significance of these theorems is. Carry this mindset over to science and you will be more creative and spend less time over-optimizing learning technologies to their full extent.\n"
}
